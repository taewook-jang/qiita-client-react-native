[{"rendered_body":"\n<h1>\n<span id=\"前書き\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%9B%B8%E3%81%8D\"><i class=\"fa fa-link\"></i></a>前書き</h1>\n\n<p>最近Objective-CのプロダクトにSwiftを導入するようになりました。Swiftの移行の方針として、<strong>SwiftとObjective-Cの間に相互互換性</strong>を保ったまま移行しようという話でチームはまとまりましたが、落とし穴があったので共有しておきます。</p>\n\n<p>というのも<strong>コンパイル時間が遅い</strong>のです。どうも差分ビルドがちゃんと働いていないようで、何が原因か調べてみました。</p>\n\n<h1>\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n\n<h2>\n<span id=\"productmodulename-swifth-が-precompiled-header-でインクルードされている\" class=\"fragment\"></span><a href=\"#productmodulename-swifth-%E3%81%8C-precompiled-header-%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%AF%E3%83%AB%E3%83%BC%E3%83%89%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B\"><i class=\"fa fa-link\"></i></a><code>ProductModuleName-Swift.h</code> が Precompiled Header でインクルードされている</h2>\n\n<p>通常Objective-CからSwiftのクラスを利用しようとする場合、自動生成されるヘッダー(<code>ProductModuleName-Swift.h</code>)をインクルードして使用する。ちなみにこのヘッダーはSwiftで書いたクラスへのインターフェースである。</p>\n\n<p>以下のような<code>TestClass</code>を定義すると</p>\n\n<div class=\"code-frame\" data-lang=\"swift\"><div class=\"highlight\"><pre>\n<span class=\"k\">class</span> <span class=\"nl\">TestClass</span><span class=\"p\">:</span> <span class=\"bp\">NSObject</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"n\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"k\">var</span> <span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">]()</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>自動生成されるヘッダーは以下のようになっている。</p>\n\n<p>ProductModuleName-Swift.h</p>\n\n<div class=\"code-frame\" data-lang=\"objc\"><div class=\"highlight\"><pre>\n<span class=\"n\">SWIFT_CLASS</span><span class=\"p\">(</span><span class=\"s\">\"_TtC11ProductModuleName19TestClass\"</span><span class=\"p\">)</span>\n<span class=\"k\">@interface</span> <span class=\"nc\">TestClass</span> : <span class=\"bp\">NSObject</span>\n<span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"k\">nonatomic</span><span class=\"p\">,</span> <span class=\"k\">copy</span><span class=\"p\">)</span> <span class=\"bp\">NSString</span> <span class=\"o\">*</span> <span class=\"n\">_Nonnull</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"k\">nonatomic</span><span class=\"p\">,</span> <span class=\"k\">copy</span><span class=\"p\">)</span> <span class=\"bp\">NSArray</span><span class=\"o\">&lt;</span><span class=\"bp\">NSString</span> <span class=\"o\">*&gt;</span> <span class=\"o\">*</span> <span class=\"n\">_Nonnull</span> <span class=\"n\">children</span><span class=\"p\">;</span>\n<span class=\"k\">@end</span>\n</pre></div></div>\n\n<p>ここからが本題だが、私が開発しているプロダクトでは便利だからという理由で、<strong><code>ProductModuleName-Swift.h</code>をPrecompiled Header<code>ProductModuleName.pch</code>でインクルードしてしまっていた</strong>。</p>\n\n<p>その結果Swiftのコードを書き換えると、Precompiled Headerに依存するファイル（つまりは全Objective-Cのファイル）を再コンパイルしだすという恐ろしい現象に陥ってしまっていた。</p>\n\n<h1>\n<span id=\"考察\" class=\"fragment\"></span><a href=\"#%E8%80%83%E5%AF%9F\"><i class=\"fa fa-link\"></i></a>考察</h1>\n\n<p>今回の問題、例えば個別のbjective-Cの実装ファイルにインクルードするような話で済むような影響範囲だったら、あまり問題ではないのだが</p>\n\n<p>Service.swift<br>\nObjective-CとSwiftを含めた多くの他クラスで使用する</p>\n\n<div class=\"code-frame\" data-lang=\"Swift\"><div class=\"highlight\"><pre>\n<span class=\"k\">class</span> <span class=\"nl\">Service</span><span class=\"p\">:</span> <span class=\"bp\">NSObject</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>SampleView.swift<br>\n一部のViewControllerのクラスで使用する</p>\n\n<div class=\"code-frame\" data-lang=\"Swift\"><div class=\"highlight\"><pre>\n<span class=\"k\">class</span> <span class=\"nl\">SampleView</span><span class=\"p\">:</span> <span class=\"bp\">UIView</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>例えば上のようなSwiftのクラスがあったとすると、このようにヘッダーファイルに書き出される。</p>\n\n<p>ProductModuleName-Swift.h</p>\n\n<div class=\"code-frame\" data-lang=\"objc\"><div class=\"highlight\"><pre>\n<span class=\"n\">SWIFT_CLASS</span><span class=\"p\">(</span><span class=\"s\">\"_TtC11ProductModuleName1Service\"</span><span class=\"p\">)</span>\n<span class=\"k\">@interface</span> <span class=\"nc\">Service</span> : <span class=\"bp\">NSObject</span>\n<span class=\"k\">@end</span>\n\n<span class=\"n\">SWIFT_CLASS</span><span class=\"p\">(</span><span class=\"s\">\"_TtC11ProductModuleName9SampleView\"</span><span class=\"p\">)</span>\n<span class=\"k\">@interface</span> <span class=\"nc\">SampleView</span> : <span class=\"bp\">UIView</span>\n<span class=\"k\">@end</span>\n\n</pre></div></div>\n\n<p>普通Swiftオンリーで書いていれば<code>SampleView</code>クラスを修正した際に、<code>Service</code>クラスには全く影響などない。しかし、<strong>同じ<code>ProductModuleName-Swift.h</code>に吐き出される</strong>ので、<code>Service</code>クラスに依存するファイルまで全て再コンパイルしてしまう。</p>\n\n<p><a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html\" rel=\"nofollow noopener\" target=\"_blank\">Using Swift with Cocoa and Objective-C (Swift 3.0.1)</a>を見ても以下のような記述が書いてあって、個別のクラスごとヘッダーをExportするような方法は書いてないし、これって解決できない問題なんですかね？</p>\n\n<blockquote>\n<p>When you import Swift code into Objective-C, you rely on an Xcode-generated header file to expose those files to Objective-C. This automatically generated file is an Objective-C header that declares the Swift interfaces in your target. It can be thought of as an umbrella header for your Swift code. The name of this header is your product module name followed by adding \"-Swift.h\". (You’ll learn more about the product module name later, in Naming Your Product Module.)</p>\n</blockquote>\n\n<p>これが今のところ解決できない問題ならば、<strong>Swiftでモデルやサービスクラスのような上位階層のクラスをSwiftで書き直してそれをObjective-Cで利用するということが難しくなってしまう</strong>。</p>\n\n<p>SwiftとObjective-Cに相互の互換性を保ったまま、開発することは難しいのだろうか？</p>\n","body":"# 前書き\n\n最近Objective-CのプロダクトにSwiftを導入するようになりました。Swiftの移行の方針として、**SwiftとObjective-Cの間に相互互換性**を保ったまま移行しようという話でチームはまとまりましたが、落とし穴があったので共有しておきます。\n\nというのも**コンパイル時間が遅い**のです。どうも差分ビルドがちゃんと働いていないようで、何が原因か調べてみました。\n\n# 原因\n\n## `ProductModuleName-Swift.h` が Precompiled Header でインクルードされている\n\n通常Objective-CからSwiftのクラスを利用しようとする場合、自動生成されるヘッダー(`ProductModuleName-Swift.h`)をインクルードして使用する。ちなみにこのヘッダーはSwiftで書いたクラスへのインターフェースである。\n\n以下のような`TestClass`を定義すると\n\n```swift \nclass TestClass: NSObject {\n    var name: String = \"\"\n    var children = [String]()\n}\n```\n\n自動生成されるヘッダーは以下のようになっている。\n\nProductModuleName-Swift.h\n\n```objc\nSWIFT_CLASS(\"_TtC11ProductModuleName19TestClass\")\n@interface TestClass : NSObject\n@property (nonatomic, copy) NSString * _Nonnull name;\n@property (nonatomic, copy) NSArray<NSString *> * _Nonnull children;\n@end\n```\n\nここからが本題だが、私が開発しているプロダクトでは便利だからという理由で、**`ProductModuleName-Swift.h`をPrecompiled Header`ProductModuleName.pch`でインクルードしてしまっていた**。\n\nその結果Swiftのコードを書き換えると、Precompiled Headerに依存するファイル（つまりは全Objective-Cのファイル）を再コンパイルしだすという恐ろしい現象に陥ってしまっていた。\n\n# 考察\n\n今回の問題、例えば個別のbjective-Cの実装ファイルにインクルードするような話で済むような影響範囲だったら、あまり問題ではないのだが\n\nService.swift\nObjective-CとSwiftを含めた多くの他クラスで使用する\n\n```Swift\nclass Service: NSObject {\n}\n```\n\nSampleView.swift\n一部のViewControllerのクラスで使用する\n\n```Swift\nclass SampleView: UIView {\n}\n```\n\n例えば上のようなSwiftのクラスがあったとすると、このようにヘッダーファイルに書き出される。\n\nProductModuleName-Swift.h\n\n```objc\nSWIFT_CLASS(\"_TtC11ProductModuleName1Service\")\n@interface Service : NSObject\n@end\n\nSWIFT_CLASS(\"_TtC11ProductModuleName9SampleView\")\n@interface SampleView : UIView\n@end\n\n```\n\n普通Swiftオンリーで書いていれば`SampleView`クラスを修正した際に、`Service`クラスには全く影響などない。しかし、**同じ`ProductModuleName-Swift.h`に吐き出される**ので、`Service`クラスに依存するファイルまで全て再コンパイルしてしまう。\n\n[Using Swift with Cocoa and Objective-C (Swift 3.0.1)](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html)を見ても以下のような記述が書いてあって、個別のクラスごとヘッダーをExportするような方法は書いてないし、これって解決できない問題なんですかね？\n\n> When you import Swift code into Objective-C, you rely on an Xcode-generated header file to expose those files to Objective-C. This automatically generated file is an Objective-C header that declares the Swift interfaces in your target. It can be thought of as an umbrella header for your Swift code. The name of this header is your product module name followed by adding \"-Swift.h\". (You’ll learn more about the product module name later, in Naming Your Product Module.)\n\nこれが今のところ解決できない問題ならば、**Swiftでモデルやサービスクラスのような上位階層のクラスをSwiftで書き直してそれをObjective-Cで利用するということが難しくなってしまう**。\n\nSwiftとObjective-Cに相互の互換性を保ったまま、開発することは難しいのだろうか？\n","coediting":false,"created_at":"2016-12-22T20:07:13+09:00","group":null,"id":"69f117d0bb2f4973efb9","private":false,"tags":[{"name":"Objective-C","versions":[]},{"name":"Swift","versions":[]}],"title":"SwiftとObjective-Cの間に相互互換性を保ったまま書くとコンパイル時間が異常に遅い","updated_at":"2016-12-22T20:10:24+09:00","url":"http://qiita.com/tamanyan/items/69f117d0bb2f4973efb9","user":{"description":"キーワード: JavaScript, CoffeeScript, Ruby, Swift, C/C++, Web Developer, Mobile App Developer","facebook_id":"","followees_count":7,"followers_count":7,"github_login_name":"tamanyan","id":"tamanyan","items_count":10,"linkedin_id":"","location":"Tokyo, Japan","name":"Taketo Yoshida","organization":"","permanent_id":42035,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/42035/profile-images/1473689010","twitter_screen_name":null,"website_url":"https://github.com/tamanyan"}},{"rendered_body":"<p>Realmには<strong>Standalone Object</strong>というRealmの管理化に置かれていない状態と、そうでない状態がある。<br>\n判定する方法は簡単で、<code>RLMObject</code>の<code>realm</code>プロパティを参照すればよい。</p>\n\n<p>Realm Objective-Cのコードだがこのようにメソッド生やしておけば役に立つ。</p>\n\n<div class=\"code-frame\" data-lang=\"swift\"><div class=\"highlight\"><pre>\n<span class=\"k\">extension</span> <span class=\"n\">RLMObject</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nl\">isStandalone</span><span class=\"p\">:</span> <span class=\"n\">Bool</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"n\">realm</span> <span class=\"o\">==</span> <span class=\"nb\">nil</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>ユースケース<br>\nキャッシュ（Realm）から取得されたのか、ネットワーク上からStandalone Objectにマッピングされたのかを判断するのに使える。</p>\n","body":"Realmには**Standalone Object**というRealmの管理化に置かれていない状態と、そうでない状態がある。\n判定する方法は簡単で、`RLMObject`の`realm`プロパティを参照すればよい。\n\nRealm Objective-Cのコードだがこのようにメソッド生やしておけば役に立つ。\n\n```swift\nextension RLMObject {\n    var isStandalone: Bool {\n        return self.realm == nil\n    }\n}\n```\n\n\nユースケース\nキャッシュ（Realm）から取得されたのか、ネットワーク上からStandalone Objectにマッピングされたのかを判断するのに使える。\n","coediting":false,"created_at":"2016-08-08T17:56:15+09:00","group":null,"id":"6e916a628c4ad0e7206a","private":false,"tags":[{"name":"iOS","versions":[]},{"name":"Swift","versions":[]},{"name":"Realm","versions":[]}],"title":"【Realm】RLMObjectがstandaloneオブジェクトかどうかを判断する方法","updated_at":"2016-08-09T10:15:33+09:00","url":"http://qiita.com/tamanyan/items/6e916a628c4ad0e7206a","user":{"description":"キーワード: JavaScript, CoffeeScript, Ruby, Swift, C/C++, Web Developer, Mobile App Developer","facebook_id":"","followees_count":7,"followers_count":7,"github_login_name":"tamanyan","id":"tamanyan","items_count":10,"linkedin_id":"","location":"Tokyo, Japan","name":"Taketo Yoshida","organization":"","permanent_id":42035,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/42035/profile-images/1473689010","twitter_screen_name":null,"website_url":"https://github.com/tamanyan"}},{"rendered_body":"<p>Swift でクラスを書いていく上でメンバ変数に <code>let</code> をなるべく使いたいが、複数行書かないと変数に代入できないケースがあると思います。そういう場合には即時関数を使えば解決します。</p>\n\n<div class=\"code-frame\" data-lang=\"swift\"><div class=\"highlight\"><pre>\n<span class=\"k\">class</span> <span class=\"n\">Sample</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nl\">member</span><span class=\"p\">:</span> <span class=\"n\">String</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"n\">str1</span> <span class=\"o\">=</span> <span class=\"s\">\"1\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">str2</span> <span class=\"o\">=</span> <span class=\"s\">\"2\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">str1</span> <span class=\"o\">+</span> <span class=\"n\">str2</span>\n    <span class=\"p\">}()</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">.</span><span class=\"n\">member</span><span class=\"p\">)</span> <span class=\"c1\">// =&gt; 12</span>\n</pre></div></div>\n\n<p>また <code>Unwrap</code> されたメンバ変数 (String!) もこれを使えば回避することができると思います。<br>\nコンストラクタでの初期化もスッキリして一石二鳥。</p>\n","body":"Swift でクラスを書いていく上でメンバ変数に `let` をなるべく使いたいが、複数行書かないと変数に代入できないケースがあると思います。そういう場合には即時関数を使えば解決します。\n\n```swift\nclass Sample {\n    let member: String = {\n        let str1 = \"1\"\n        let str2 = \"2\"\n        return str1 + str2\n    }()\n}\n\nlet sample = Sample()\nprintln(sample.member) // => 12\n```\n\n\nまた `Unwrap` されたメンバ変数 (String!) もこれを使えば回避することができると思います。\nコンストラクタでの初期化もスッキリして一石二鳥。\n","coediting":false,"created_at":"2015-07-01T11:25:38+09:00","group":null,"id":"4c75d46019571253825f","private":false,"tags":[{"name":"iOS","versions":[]},{"name":"Swift","versions":[]}],"title":"Swift メンバ変数になるべく let を使う方法 ","updated_at":"2015-07-01T11:27:04+09:00","url":"http://qiita.com/tamanyan/items/4c75d46019571253825f","user":{"description":"キーワード: JavaScript, CoffeeScript, Ruby, Swift, C/C++, Web Developer, Mobile App Developer","facebook_id":"","followees_count":7,"followers_count":7,"github_login_name":"tamanyan","id":"tamanyan","items_count":10,"linkedin_id":"","location":"Tokyo, Japan","name":"Taketo Yoshida","organization":"","permanent_id":42035,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/42035/profile-images/1473689010","twitter_screen_name":null,"website_url":"https://github.com/tamanyan"}},{"rendered_body":"\n<h2>\n<span id=\"ios-で-webp-を扱う上での注意点\" class=\"fragment\"></span><a href=\"#ios-%E3%81%A7-webp-%E3%82%92%E6%89%B1%E3%81%86%E4%B8%8A%E3%81%A7%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9\"><i class=\"fa fa-link\"></i></a>iOS で WebP を扱う上での注意点</h2>\n\n<p>iOS アプリ開発の仕事で WebP を使うことがあったのだが、そのときの体験談を話す。<br>\nそのアプリは画像ビュワーのようなもので、大量の（高解像度）画像をダウンロードして見るものである。</p>\n\n<p>大量の画像（WebP）をダウンロードして一度にエンコードすると CPU 使用率がひどいことになるので、一度ディスクにWebPの形式のままキャッシュしておくのがよい。</p>\n\n<p>必要に応じてエンコードするためにその画像データが WebP の形式かどうかを判定する方法がないかと模索したが、バイナリの先頭を見ることにした。画像フォーマットなんて決まってるしこれでいいですかね？</p>\n\n<div class=\"code-frame\" data-lang=\"swift\"><div class=\"highlight\"><pre>\n<span class=\"k\">func</span> <span class=\"n\">isWebP</span><span class=\"p\">(</span><span class=\"nl\">data</span><span class=\"p\">:</span> <span class=\"bp\">NSData</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Bool</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">UInt8</span><span class=\"p\">](</span><span class=\"nl\">count</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nl\">repeatedValue</span><span class=\"p\">:</span> <span class=\"mh\">0x00</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">getBytes</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"nl\">length</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">buffer</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">82</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"nb\">true</span> <span class=\"o\">:</span> <span class=\"nb\">false</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>画像のダウンローダーは <a href=\"https://github.com/rs/SDWebImage\" rel=\"nofollow noopener\" target=\"_blank\">SDWebImage</a> を使用したが、</p>\n\n<ul>\n<li>ダウンロードと同時にエンコードが走る</li>\n<li>ダウンロード後にディスクだけに保存ができない（メモリとディスク両方なら可能）</li>\n</ul>\n\n<p>この二つの理由から SDWebImage は WebP エンコードのためだけに使用し <a href=\"https://github.com/Alamofire/Alamofire\" rel=\"nofollow noopener\" target=\"_blank\">Alamofire</a> をダウンローダーとして使った。</p>\n\n<div class=\"code-frame\" data-lang=\"swift\"><div class=\"highlight\"><pre>\n<span class=\"n\">Alamofire</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(.</span><span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">).</span><span class=\"n\">response</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"n\">error</span> <span class=\"o\">!=</span> <span class=\"nb\">nil</span> <span class=\"p\">{</span>\n        <span class=\"k\">var</span> <span class=\"n\">imageData</span> <span class=\"o\">=</span> <span class=\"n\">data</span> <span class=\"kt\">as</span><span class=\"o\">?</span> <span class=\"bp\">NSData</span>\n        <span class=\"c1\">// 一度にエンコードすると重くなる</span>\n        <span class=\"c1\">// var image = UIImage.sd_imageWithWebPData(imageData)</span>\n\n        <span class=\"c1\">// save to disk code</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<ul>\n<li>高解像度画像を一気にダウンロードしてエンコードすると CPU 使用率が高くなる</li>\n<li>SDWebImage（WebP 対応の画像ダウンローダー） は意外と融通が効かないので、一部自分で実装もしくは他のライブラリの力を借りた方が良い場合もある</li>\n</ul>\n","body":"## iOS で WebP を扱う上での注意点\n\niOS アプリ開発の仕事で WebP を使うことがあったのだが、そのときの体験談を話す。\nそのアプリは画像ビュワーのようなもので、大量の（高解像度）画像をダウンロードして見るものである。\n\n大量の画像（WebP）をダウンロードして一度にエンコードすると CPU 使用率がひどいことになるので、一度ディスクにWebPの形式のままキャッシュしておくのがよい。\n\n必要に応じてエンコードするためにその画像データが WebP の形式かどうかを判定する方法がないかと模索したが、バイナリの先頭を見ることにした。画像フォーマットなんて決まってるしこれでいいですかね？\n \n\n```swift\nfunc isWebP(data: NSData) -> Bool {\n    var buffer = [UInt8](count: 4, repeatedValue: 0x00)\n    data.getBytes(&buffer, length: 4)\n    return buffer == [82, 73, 70, 70] ? true : false\n}\n```\n\n画像のダウンローダーは [SDWebImage](https://github.com/rs/SDWebImage) を使用したが、\n\n- ダウンロードと同時にエンコードが走る\n- ダウンロード後にディスクだけに保存ができない（メモリとディスク両方なら可能）\n\nこの二つの理由から SDWebImage は WebP エンコードのためだけに使用し [Alamofire](https://github.com/Alamofire/Alamofire) をダウンローダーとして使った。\n\n```swift\nAlamofire.request(.GET, url).response { (request, response, data, error) in\n    if error != nil {\n        var imageData = data as? NSData\n        // 一度にエンコードすると重くなる\n        // var image = UIImage.sd_imageWithWebPData(imageData)\n\n        // save to disk code\n    }\n}\n```\n\n## まとめ\n\n- 高解像度画像を一気にダウンロードしてエンコードすると CPU 使用率が高くなる\n- SDWebImage（WebP 対応の画像ダウンローダー） は意外と融通が効かないので、一部自分で実装もしくは他のライブラリの力を借りた方が良い場合もある\n","coediting":false,"created_at":"2015-06-30T22:58:57+09:00","group":null,"id":"1dcfe1112c5d6cd0df42","private":false,"tags":[{"name":"iOS","versions":[]},{"name":"Swift","versions":[]},{"name":"WebP","versions":[]}],"title":"iOS で WebP を扱う","updated_at":"2015-06-30T23:12:01+09:00","url":"http://qiita.com/tamanyan/items/1dcfe1112c5d6cd0df42","user":{"description":"キーワード: JavaScript, CoffeeScript, Ruby, Swift, C/C++, Web Developer, Mobile App Developer","facebook_id":"","followees_count":7,"followers_count":7,"github_login_name":"tamanyan","id":"tamanyan","items_count":10,"linkedin_id":"","location":"Tokyo, Japan","name":"Taketo Yoshida","organization":"","permanent_id":42035,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/42035/profile-images/1473689010","twitter_screen_name":null,"website_url":"https://github.com/tamanyan"}},{"rendered_body":"\n<h2>\n<span id=\"swiftでの同期処理\" class=\"fragment\"></span><a href=\"#swift%E3%81%A7%E3%81%AE%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>Swiftでの同期処理</h2>\n\n<p><a href=\"http://stackoverflow.com/questions/24045895/what-is-the-swift-equivalent-to-objective-cs-synchronized\" rel=\"nofollow noopener\" target=\"_blank\">What is the Swift equivalent to Objective-C's “@synchronized”?</a></p>\n\n<h3>\n<span id=\"gcd-を使う\" class=\"fragment\"></span><a href=\"#gcd-%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>GCD を使う</h3>\n\n<div class=\"code-frame\" data-lang=\"swift\"><div class=\"highlight\"><pre>\n<span class=\"k\">let</span> <span class=\"n\">lockQueue</span> <span class=\"o\">=</span> <span class=\"n\">DispatchQueue</span><span class=\"p\">(</span><span class=\"nl\">label</span><span class=\"p\">:</span> <span class=\"s\">\"com.test.LockQueue\"</span><span class=\"p\">)</span>\n<span class=\"n\">lockQueue</span><span class=\"p\">.</span><span class=\"n\">sync</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// critical section code</span>\n<span class=\"p\">}</span>\n\n</pre></div></div>\n\n<h3>\n<span id=\"objc_sync_enter--objc_sync_exit-を使う\" class=\"fragment\"></span><a href=\"#objc_sync_enter--objc_sync_exit-%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>objc_sync_enter / objc_sync_exit を使う</h3>\n\n<div class=\"code-frame\" data-lang=\"swift\"><div class=\"highlight\"><pre>\n<span class=\"n\">public</span> <span class=\"k\">func</span> <span class=\"nf\">synchronized</span><span class=\"p\">(</span><span class=\"nl\">obj</span><span class=\"p\">:</span> <span class=\"n\">AnyObject</span><span class=\"p\">,</span> <span class=\"nl\">closure</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">objc_sync_enter</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n    <span class=\"n\">closure</span><span class=\"p\">()</span>\n    <span class=\"n\">objc_sync_exit</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">synchronized</span><span class=\"p\">(</span><span class=\"nb\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// critical section code</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>私は後者を採用しました。</p>\n","body":"## Swiftでの同期処理\n\n[What is the Swift equivalent to Objective-C's “@synchronized”?](http://stackoverflow.com/questions/24045895/what-is-the-swift-equivalent-to-objective-cs-synchronized)\n\n### GCD を使う\n\n```swift\nlet lockQueue = DispatchQueue(label: \"com.test.LockQueue\")\nlockQueue.sync {\n    // critical section code\n}\n\n```\n\n### objc_sync_enter / objc_sync_exit を使う\n\n```swift\npublic func synchronized(obj: AnyObject, closure: () -> Void) {\n    objc_sync_enter(obj)\n    closure()\n    objc_sync_exit(obj)\n}\n\nsynchronized(self) {\n    // critical section code\n}\n```\n\n私は後者を採用しました。\n","coediting":false,"created_at":"2015-06-30T14:58:45+09:00","group":null,"id":"2a271886ba103c671a04","private":false,"tags":[{"name":"iOS","versions":[]},{"name":"Swift","versions":[]}],"title":"Swift マルチスレッドでの同期処理（synchronized）","updated_at":"2017-03-10T13:29:00+09:00","url":"http://qiita.com/tamanyan/items/2a271886ba103c671a04","user":{"description":"キーワード: JavaScript, CoffeeScript, Ruby, Swift, C/C++, Web Developer, Mobile App Developer","facebook_id":"","followees_count":7,"followers_count":7,"github_login_name":"tamanyan","id":"tamanyan","items_count":10,"linkedin_id":"","location":"Tokyo, Japan","name":"Taketo Yoshida","organization":"","permanent_id":42035,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/42035/profile-images/1473689010","twitter_screen_name":null,"website_url":"https://github.com/tamanyan"}},{"rendered_body":"<p>(追記)</p>\n\n<p>コメントにも書いてある通り、よくよく調べてみるとビルドはできるが、申請は無理らしい</p>\n\n<blockquote>\n<p>In the meantime, I will point out that it is only supported to use an embedded framework on iOS 8. The only question is whether you could use dlopen() to conditionally load the embedded framework on iOS 8, and not load the embedded framework on earlier versions of iOS.</p>\n</blockquote>\n\n<p><a href=\"http://stackoverflow.com/questions/29682272/embedded-frameworks-ios-8/29982816#29982816\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://stackoverflow.com/questions/29682272/embedded-frameworks-ios-8/29982816#29982816</a></p>\n\n<h1>\n<span id=\"前置き\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E7%BD%AE%E3%81%8D\"><i class=\"fa fa-link\"></i></a>前置き</h1>\n\n<p>iPhone ユーザーは OS のアップデートに対して積極的に取り組んでくれるが、まだまだ レガシー OS に対して対応しなければならないことがあると思う。</p>\n\n<p>しかし、Deployment Target 7.0 での Swift の開発は非常に厄介で、<strong>CocoaPods による Swift ライブラリの導入ができない</strong>。そこでライブラリのソースファイルをプロジェクトにドラッグアンドドロップで入れるというお粗末な導入がしばしば見受けられる。これによる弊害として</p>\n\n<ul>\n<li>名前空間が使えない</li>\n<li>バージョン管理下にライブラリのソースコードが入る（submoduleで解決するが...）</li>\n</ul>\n\n<p>特に名前空間を使えないのは、非常に困る。Swift の名前空間は C++ のような明示的なものではなく Embedded Framework 単位で名前空間 <sup id=\"fnref1\"><a href=\"#fn1\" rel=\"footnote\" title=\"Swiftの名前空間とは\">1</a></sup> が分かれている。そのため、同じターゲットに対してドラッグアンドドロップで Swift のライブラリを追加していくと、まれにクラス名が被ってコンパイルできないことがある。Carthage <sup id=\"fnref2\"><a href=\"#fn2\" rel=\"footnote\" title=\"https://github.com/Carthage/Carthage\">2</a></sup> を使うなど対応方法があるが、多くのライブラリが CocoaPods を使用しているという状況。</p>\n\n<p>そこで、自分の環境では <strong>Embedded Framework</strong> と <strong>git submodule</strong> を利用して名前空間を利用しながら Swift で iOS の開発をしているのでその紹介をする。</p>\n\n<h1>\n<span id=\"手法\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E6%B3%95\"><i class=\"fa fa-link\"></i></a>手法</h1>\n\n<h2>\n<span id=\"構成\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>構成</h2>\n\n<p>CocoaPods (Obj-Cのライブラリのみ使用)を利用した環境を想定する。<br>\nここに<code>./Vendor</code>と<code>./Vendor/Checkouts</code>というディレクトリを作成しておく。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n➜ tree -L 1\n.\n├── Deploy7Sample\n├── Deploy7Sample.xcodeproj\n├── Deploy7Sample.xcworkspace\n├── Deploy7SampleTests\n├── Podfile\n├── Podfile.lock\n├── Pods\n└── Vendor\n    └── Checkouts\n\n6 directories, 2 files\n</pre></div></div>\n\n<h2>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h2>\n\n<p><a>Alamofire</a> を導入してみる。まずは submodule で <code>./Vendor/Checkouts</code> に checkout</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n➜ git submodule add git@github.com:Alamofire/Alamofire.git Vendor/Checkouts/Alamofire\nCloning into 'Vendor/Checkouts/Alamofire'...\nremote: Counting objects: 1741, done.\nremote: Compressing objects: 100% (52/52), done.\nremote: Total 1741 (delta 23), reused 0 (delta 0), pack-reused 1689\nReceiving objects: 100% (1741/1741), 930.78 KiB | 744.00 KiB/s, done.\nResolving deltas: 100% (982/982), done.\nChecking connectivity... done.\n</pre></div></div>\n\n<p>次にプロジェクトを開く</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n➜ open Deploy7Sample.xcworkspace\n</pre></div></div>\n\n<p>まずは <strong>File</strong> -&gt; <strong>New</strong> -&gt; <strong>Target</strong> から <strong>Cocoa Touch Framework</strong> を選択</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/15f5ed2b-21c0-82d7-31d8-ea4966532fd5.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/15f5ed2b-21c0-82d7-31d8-ea4966532fd5.png\" alt=\"スクリーンショット 2015-06-23 15.57.55.png\"></a></p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/17234b57-2ff9-f734-2e2c-661971285785.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/17234b57-2ff9-f734-2e2c-661971285785.png\" alt=\"スクリーンショット 2015-06-23 16.17.17.png\"></a></p>\n\n<p>Framework の名前は <strong>Alamofire</strong> にしておく</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/66088b8f-33fc-8553-f14d-73f5b1ef91a8.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/66088b8f-33fc-8553-f14d-73f5b1ef91a8.png\" alt=\"スクリーンショット 2015-06-23 15.59.24.png\"></a></p>\n\n<p>すると <code>Alamofire</code> と <code>AlamofireTests</code> というターゲットとグループができるので Unit Test の AlamofireTests どっちも使わないので消しておく。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/dc31be4c-5cf7-4371-a302-c2680f870b6e.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/dc31be4c-5cf7-4371-a302-c2680f870b6e.png\" alt=\"スクリーンショット_2015-06-23_15_59_42.png\"></a></p>\n\n<p><code>./Alamofire</code>ディレクトリは<code>./Vendor</code>の中に移動し、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nmv Alamofire Vendor/Alamofire\n</pre></div></div>\n\n<p>グループ<code>Vendor</code>とその子供にグループ<code>Alamofire</code>を追加する。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/daf65e08-ef22-6150-8201-523082481a4a.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/daf65e08-ef22-6150-8201-523082481a4a.png\" alt=\"スクリーンショット 2015-06-23 16.01.44.png\"></a></p>\n\n<p>このままだとグループとディレクトリ構成が合わないので、グループ<code>Vendor</code>と<code>Alamofire</code>のロケーションを変更しておく。</p>\n\n<ul>\n<li>グループ<code>Vendor</code> -&gt; <code>./Vendor</code>\n</li>\n<li>グループ<code>Vendor/Alamofire</code> -&gt; <code>./Vendor/Alamofire</code>\n</li>\n</ul>\n\n<p>にロケーションを変更</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/1c520c25-6add-db8c-b0ca-13db30b95bcc.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/1c520c25-6add-db8c-b0ca-13db30b95bcc.png\" alt=\"スクリーンショット_2015-06-23_16_01_54.png\"></a></p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/0fc5b738-e0d5-8333-9cbd-b5153e8e59b2.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/0fc5b738-e0d5-8333-9cbd-b5153e8e59b2.png\" alt=\"スクリーンショット 2015-06-23 16.03.53.png\"></a></p>\n\n<p>グループ<code>Alamofire</code>を移動させると<code>info.plist</code>が行方不明になるので、<code>info.plist</code>をダイアログから選択しておく。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/2554dc4c-bc33-951b-5ac6-0d30d055a290.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/2554dc4c-bc33-951b-5ac6-0d30d055a290.png\" alt=\"スクリーンショット 2015-06-23 16.04.24.png\"></a></p>\n\n<p>Alamofireのソースファイルをプロジェクトに追加する。<br>\n<strong>この時に<code>Copy items if needed</code>のチェックを外しておくことと<code>Add to targets</code>のチェックを<code>Alamofire</code>に変更しておくことを忘れずに</strong></p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/f172f62f-bc9b-5d24-760d-6c4bbe5a0ca3.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/f172f62f-bc9b-5d24-760d-6c4bbe5a0ca3.png\" alt=\"スクリーンショット 2015-06-23 16.07.58.png\"></a></p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/abc02c4b-7950-1ff1-041e-df94b9dea397.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/abc02c4b-7950-1ff1-041e-df94b9dea397.png\" alt=\"スクリーンショット 2015-06-23 16.08.17.png\"></a></p>\n\n<p>Deployment Target を 7.0 に設定する</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/96bd23c3-882c-bd78-ac5f-085cf4e9a395.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/96bd23c3-882c-bd78-ac5f-085cf4e9a395.png\" alt=\"Untitled.png\"></a></p>\n\n<p>あとは<code>ViewController</code>に次のサンプルコードを書いて終了</p>\n\n<div class=\"code-frame\" data-lang=\"swift\"><div class=\"highlight\"><pre>\n<span class=\"k\">import</span> <span class=\"n\">UIKit</span>\n<span class=\"k\">import</span> <span class=\"n\">Alamofire</span>\n\n<span class=\"k\">class</span> <span class=\"nl\">ViewController</span><span class=\"p\">:</span> <span class=\"bp\">UIViewController</span> <span class=\"p\">{</span>\n\n    <span class=\"kr\">override</span> <span class=\"k\">func</span> <span class=\"n\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nb\">super</span><span class=\"p\">.</span><span class=\"n\">viewDidLoad</span><span class=\"p\">()</span>\n        <span class=\"c1\">// Do any additional setup after loading the view, typically from a nib.</span>\n        <span class=\"n\">Alamofire</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(.</span><span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"s\">\"http://httpbin.org/get\"</span><span class=\"p\">)</span>\n            <span class=\"p\">.</span><span class=\"n\">response</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n                <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n                <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n                <span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">override</span> <span class=\"k\">func</span> <span class=\"n\">didReceiveMemoryWarning</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nb\">super</span><span class=\"p\">.</span><span class=\"n\">didReceiveMemoryWarning</span><span class=\"p\">()</span>\n        <span class=\"c1\">// Dispose of any resources that can be recreated.</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/dcdffdef-245b-7f11-4dd9-90909d8c2d80.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/dcdffdef-245b-7f11-4dd9-90909d8c2d80.png\" alt=\"スクリーンショット 2015-06-23 16.10.32.png\"></a></p>\n\n<h2>\n<span id=\"参考url\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83url\"><i class=\"fa fa-link\"></i></a>参考URL</h2>\n\n<ul>\n<li><a href=\"http://mushikago.com/i/?p=5521\" rel=\"nofollow noopener\" target=\"_blank\">[Xcode6] SwiftでCocoa Touch Frameworkを作る</a></li>\n</ul>\n\n<div class=\"footnotes\">\n<hr>\n<ol>\n\n<li id=\"fn1\">\n<p><a href=\"http://tsuchikazu.net/swift_namespace/\" rel=\"nofollow noopener\" target=\"_blank\">Swiftの名前空間とは</a> <a href=\"#fnref1\">↩</a></p>\n</li>\n\n<li id=\"fn2\">\n<p><a href=\"http://qiita.com/susieyy/items/4222989485e16e7eb53e\" id=\"reference-f4df7bd37a811532721b\">https://github.com/Carthage/Carthage</a> <a href=\"#fnref2\">↩</a></p>\n</li>\n\n</ol>\n</div>\n","body":"(追記)\n\nコメントにも書いてある通り、よくよく調べてみるとビルドはできるが、申請は無理らしい\n\n> In the meantime, I will point out that it is only supported to use an embedded framework on iOS 8. The only question is whether you could use dlopen() to conditionally load the embedded framework on iOS 8, and not load the embedded framework on earlier versions of iOS.\n\nhttp://stackoverflow.com/questions/29682272/embedded-frameworks-ios-8/29982816#29982816\n\n# 前置き\n\niPhone ユーザーは OS のアップデートに対して積極的に取り組んでくれるが、まだまだ レガシー OS に対して対応しなければならないことがあると思う。\n\nしかし、Deployment Target 7.0 での Swift の開発は非常に厄介で、**CocoaPods による Swift ライブラリの導入ができない**。そこでライブラリのソースファイルをプロジェクトにドラッグアンドドロップで入れるというお粗末な導入がしばしば見受けられる。これによる弊害として\n\n- 名前空間が使えない\n- バージョン管理下にライブラリのソースコードが入る（submoduleで解決するが...）\n\n特に名前空間を使えないのは、非常に困る。Swift の名前空間は C++ のような明示的なものではなく Embedded Framework 単位で名前空間 [^1] が分かれている。そのため、同じターゲットに対してドラッグアンドドロップで Swift のライブラリを追加していくと、まれにクラス名が被ってコンパイルできないことがある。Carthage [^2] を使うなど対応方法があるが、多くのライブラリが CocoaPods を使用しているという状況。\n\nそこで、自分の環境では **Embedded Framework** と **git submodule** を利用して名前空間を利用しながら Swift で iOS の開発をしているのでその紹介をする。\n\n# 手法\n\n## 構成\n\nCocoaPods (Obj-Cのライブラリのみ使用)を利用した環境を想定する。\nここに`./Vendor`と`./Vendor/Checkouts`というディレクトリを作成しておく。\n\n```\n➜ tree -L 1\n.\n├── Deploy7Sample\n├── Deploy7Sample.xcodeproj\n├── Deploy7Sample.xcworkspace\n├── Deploy7SampleTests\n├── Podfile\n├── Podfile.lock\n├── Pods\n└── Vendor\n    └── Checkouts\n\n6 directories, 2 files\n```\n\n## 手順\n\n[Alamofire](git@github.com:Alamofire/Alamofire.git) を導入してみる。まずは submodule で `./Vendor/Checkouts` に checkout\n\n```\n➜ git submodule add git@github.com:Alamofire/Alamofire.git Vendor/Checkouts/Alamofire\nCloning into 'Vendor/Checkouts/Alamofire'...\nremote: Counting objects: 1741, done.\nremote: Compressing objects: 100% (52/52), done.\nremote: Total 1741 (delta 23), reused 0 (delta 0), pack-reused 1689\nReceiving objects: 100% (1741/1741), 930.78 KiB | 744.00 KiB/s, done.\nResolving deltas: 100% (982/982), done.\nChecking connectivity... done.\n```\n\n次にプロジェクトを開く\n\n```\n➜ open Deploy7Sample.xcworkspace\n```\n\nまずは **File** -> **New** -> **Target** から **Cocoa Touch Framework** を選択\n\n![スクリーンショット 2015-06-23 15.57.55.png](https://qiita-image-store.s3.amazonaws.com/0/42035/15f5ed2b-21c0-82d7-31d8-ea4966532fd5.png)\n\n![スクリーンショット 2015-06-23 16.17.17.png](https://qiita-image-store.s3.amazonaws.com/0/42035/17234b57-2ff9-f734-2e2c-661971285785.png)\n\nFramework の名前は **Alamofire** にしておく\n\n![スクリーンショット 2015-06-23 15.59.24.png](https://qiita-image-store.s3.amazonaws.com/0/42035/66088b8f-33fc-8553-f14d-73f5b1ef91a8.png)\n\nすると `Alamofire` と `AlamofireTests` というターゲットとグループができるので Unit Test の AlamofireTests どっちも使わないので消しておく。\n\n![スクリーンショット_2015-06-23_15_59_42.png](https://qiita-image-store.s3.amazonaws.com/0/42035/dc31be4c-5cf7-4371-a302-c2680f870b6e.png)\n\n\n`./Alamofire`ディレクトリは`./Vendor`の中に移動し、\n\n```\nmv Alamofire Vendor/Alamofire\n```\nグループ`Vendor`とその子供にグループ`Alamofire`を追加する。\n\n![スクリーンショット 2015-06-23 16.01.44.png](https://qiita-image-store.s3.amazonaws.com/0/42035/daf65e08-ef22-6150-8201-523082481a4a.png)\n\n\nこのままだとグループとディレクトリ構成が合わないので、グループ`Vendor`と`Alamofire`のロケーションを変更しておく。\n\n- グループ`Vendor` -> `./Vendor`\n- グループ`Vendor/Alamofire` -> `./Vendor/Alamofire`\n\nにロケーションを変更\n\n![スクリーンショット_2015-06-23_16_01_54.png](https://qiita-image-store.s3.amazonaws.com/0/42035/1c520c25-6add-db8c-b0ca-13db30b95bcc.png)\n\n![スクリーンショット 2015-06-23 16.03.53.png](https://qiita-image-store.s3.amazonaws.com/0/42035/0fc5b738-e0d5-8333-9cbd-b5153e8e59b2.png)\n\nグループ`Alamofire`を移動させると`info.plist`が行方不明になるので、`info.plist`をダイアログから選択しておく。\n\n![スクリーンショット 2015-06-23 16.04.24.png](https://qiita-image-store.s3.amazonaws.com/0/42035/2554dc4c-bc33-951b-5ac6-0d30d055a290.png)\n\nAlamofireのソースファイルをプロジェクトに追加する。\n**この時に`Copy items if needed`のチェックを外しておくことと`Add to targets`のチェックを`Alamofire`に変更しておくことを忘れずに**\n\n![スクリーンショット 2015-06-23 16.07.58.png](https://qiita-image-store.s3.amazonaws.com/0/42035/f172f62f-bc9b-5d24-760d-6c4bbe5a0ca3.png)\n\n![スクリーンショット 2015-06-23 16.08.17.png](https://qiita-image-store.s3.amazonaws.com/0/42035/abc02c4b-7950-1ff1-041e-df94b9dea397.png)\n\nDeployment Target を 7.0 に設定する\n\n![Untitled.png](https://qiita-image-store.s3.amazonaws.com/0/42035/96bd23c3-882c-bd78-ac5f-085cf4e9a395.png)\n\nあとは`ViewController`に次のサンプルコードを書いて終了\n\n```swift\nimport UIKit\nimport Alamofire\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n        Alamofire.request(.GET, \"http://httpbin.org/get\")\n            .response { (request, response, data, error) in\n                println(request)\n                println(response)\n                println(error)\n        }\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n\n}\n```\n\n![スクリーンショット 2015-06-23 16.10.32.png](https://qiita-image-store.s3.amazonaws.com/0/42035/dcdffdef-245b-7f11-4dd9-90909d8c2d80.png)\n\n\n## 参考URL\n\n- [[Xcode6] SwiftでCocoa Touch Frameworkを作る](http://mushikago.com/i/?p=5521)\n\n\n[^1]: [Swiftの名前空間とは](http://tsuchikazu.net/swift_namespace/)\n[^2]: [https://github.com/Carthage/Carthage](http://qiita.com/susieyy/items/4222989485e16e7eb53e)\n","coediting":false,"created_at":"2015-06-23T17:19:29+09:00","group":null,"id":"658f7abb45a54ce8945b","private":false,"tags":[{"name":"Xcode","versions":[]},{"name":"ios7","versions":[]},{"name":"Swift","versions":[]}],"title":"Deployment Target 7.0 での Swift 開発","updated_at":"2015-06-23T19:08:29+09:00","url":"http://qiita.com/tamanyan/items/658f7abb45a54ce8945b","user":{"description":"キーワード: JavaScript, CoffeeScript, Ruby, Swift, C/C++, Web Developer, Mobile App Developer","facebook_id":"","followees_count":7,"followers_count":7,"github_login_name":"tamanyan","id":"tamanyan","items_count":10,"linkedin_id":"","location":"Tokyo, Japan","name":"Taketo Yoshida","organization":"","permanent_id":42035,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/42035/profile-images/1473689010","twitter_screen_name":null,"website_url":"https://github.com/tamanyan"}},{"rendered_body":"\n<h1>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n\n<p>FuelPHPでプロファイルを見たいときには<a href=\"http://fuelphp.com/docs/general/profiling.html\" rel=\"nofollow noopener\" target=\"_blank\">PHP Quick Profiler</a>をベースにしたProfilerが一番簡単だが、ファイルやログに出力できない？のが非常に使いにくい。</p>\n\n<p>特にAPI Serverなどを開発している時にはQuick Profilerなんて見れない。<br>\n↓他の人は<code>fuel/core/classes/profiler.php</code>を置き換えたりしているが、コアライブラリを置き換えるのはなるべくやめたい。</p>\n\n<p>そこで、<code>FuelPHPのEvent</code>と<code>ReflectionClass</code>を使ってプロファイルをログに出力することをやってみる。</p>\n\n<ul>\n<li>\n<a href=\"http://www.slideshare.net/MiuraKatsu/ss-26186401\" rel=\"nofollow noopener\" target=\"_blank\">FuelPHPで３種のprofilerを使ってみた</a> </li>\n</ul>\n\n<h1>\n<span id=\"reflection-class\" class=\"fragment\"></span><a href=\"#reflection-class\"><i class=\"fa fa-link\"></i></a>Reflection Class</h1>\n\n<p>ReflectionClassはPHP5から導入されている。</p>\n\n<blockquote>\n<p>情報工学においてリフレクション (reflection) とは、プログラムの実行過程でプログラム自身の構造を読み取ったり書き換えたりする技術のことを指す。by wikipedia</p>\n</blockquote>\n\n<p>ようは外部からクラスの中身をいじったりできる機能である。</p>\n\n<h1>\n<span id=\"コード\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>コード</h1>\n\n<p>方針としてはReflectionClassでProfilerクラスの変数を外部からアクセス可能な状態にして必要な情報を取得する。</p>\n\n<p>ログを出力する場所はリクエストを送った後の終了時にする。<br>\nそこでFuelPHPの<a href=\"http://fuelphp.jp/docs/1.6/classes/event.html\" rel=\"nofollow noopener\" target=\"_blank\">Eventクラス</a>はリクエストを送った後の終了時のイベントハンドラを登録することができる。</p>\n\n<p>実際には<code>app/config/event.php</code>に以下のコードを置く。</p>\n\n<div class=\"code-frame\" data-lang=\"php\"><div class=\"highlight\"><pre>\n<span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">return</span> <span class=\"k\">array</span><span class=\"p\">(</span>\n    <span class=\"s1\">'fuelphp'</span> <span class=\"o\">=&gt;</span> <span class=\"k\">array</span><span class=\"p\">(</span>\n        <span class=\"s1\">'shutdown'</span> <span class=\"o\">=&gt;</span> <span class=\"k\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nv\">$ref</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ReflectionClass</span><span class=\"p\">(</span><span class=\"s1\">'Profiler'</span><span class=\"p\">);</span>\n            <span class=\"nv\">$prop</span> <span class=\"o\">=</span> <span class=\"nv\">$ref</span><span class=\"o\">-&gt;</span><span class=\"na\">getProperty</span><span class=\"p\">(</span><span class=\"s1\">'profiler'</span><span class=\"p\">);</span>\n            <span class=\"nv\">$prop</span><span class=\"o\">-&gt;</span><span class=\"na\">setAccessible</span><span class=\"p\">(</span><span class=\"k\">true</span><span class=\"p\">);</span>\n            <span class=\"nv\">$profiler</span> <span class=\"o\">=</span> <span class=\"nv\">$prop</span><span class=\"o\">-&gt;</span><span class=\"na\">getValue</span><span class=\"p\">();</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$profiler</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nv\">$profiler</span><span class=\"o\">-&gt;</span><span class=\"na\">db</span> <span class=\"o\">=</span> <span class=\"nv\">$profiler</span><span class=\"p\">;</span>\n                <span class=\"nv\">$profiler</span><span class=\"o\">-&gt;</span><span class=\"na\">gatherConsoleData</span><span class=\"p\">();</span>\n                <span class=\"nv\">$profiler</span><span class=\"o\">-&gt;</span><span class=\"na\">gatherPathData</span><span class=\"p\">();</span>\n                <span class=\"nv\">$profiler</span><span class=\"o\">-&gt;</span><span class=\"na\">gatherFileData</span><span class=\"p\">();</span>\n                <span class=\"nv\">$profiler</span><span class=\"o\">-&gt;</span><span class=\"na\">gatherMemoryData</span><span class=\"p\">();</span>\n                <span class=\"nv\">$profiler</span><span class=\"o\">-&gt;</span><span class=\"na\">gatherQueryData</span><span class=\"p\">();</span>\n                <span class=\"nv\">$profiler</span><span class=\"o\">-&gt;</span><span class=\"na\">gatherSpeedData</span><span class=\"p\">();</span>\n                <span class=\"nx\">\\Log</span><span class=\"o\">::</span><span class=\"na\">info</span><span class=\"p\">(</span><span class=\"nb\">print_r</span><span class=\"p\">(</span><span class=\"nv\">$profiler</span><span class=\"o\">-&gt;</span><span class=\"na\">output</span><span class=\"p\">,</span> <span class=\"k\">true</span><span class=\"p\">));</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">);</span>\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n(\n    [logs] =&gt; Array\n        (\n            [console] =&gt; Array\n                (\n                    [0] =&gt; Array\n                        (\n                            [data] =&gt; 1.412 ms\n                            [type] =&gt; speed\n                            [name] =&gt; Fuel\\Core\\Profiler::init Start\n                        )\n\n                    [1] =&gt; Array\n                        (\n                            [data] =&gt; 2.361 ms\n                            [type] =&gt; speed\n                            [name] =&gt; Fuel\\Core\\Fuel::init End\n                        )\n\n                    [2] =&gt; Array\n                        (\n                            [data] =&gt; 2.433 ms\n                            [type] =&gt; speed\n                            [name] =&gt; Fuel\\Core\\Uri::__construct Start\n                        )\n...\n</pre></div></div>\n","body":"# 概要\nFuelPHPでプロファイルを見たいときには[PHP Quick Profiler](http://fuelphp.com/docs/general/profiling.html)をベースにしたProfilerが一番簡単だが、ファイルやログに出力できない？のが非常に使いにくい。\n\n特にAPI Serverなどを開発している時にはQuick Profilerなんて見れない。\n↓他の人は`fuel/core/classes/profiler.php`を置き換えたりしているが、コアライブラリを置き換えるのはなるべくやめたい。\n\nそこで、`FuelPHPのEvent`と`ReflectionClass`を使ってプロファイルをログに出力することをやってみる。\n\n- [FuelPHPで３種のprofilerを使ってみた](http://www.slideshare.net/MiuraKatsu/ss-26186401) \n\n# Reflection Class\nReflectionClassはPHP5から導入されている。\n\n>情報工学においてリフレクション (reflection) とは、プログラムの実行過程でプログラム自身の構造を読み取ったり書き換えたりする技術のことを指す。by wikipedia\n\nようは外部からクラスの中身をいじったりできる機能である。\n\n# コード\n方針としてはReflectionClassでProfilerクラスの変数を外部からアクセス可能な状態にして必要な情報を取得する。\n\nログを出力する場所はリクエストを送った後の終了時にする。\nそこでFuelPHPの[Eventクラス](http://fuelphp.jp/docs/1.6/classes/event.html)はリクエストを送った後の終了時のイベントハンドラを登録することができる。\n\n実際には`app/config/event.php`に以下のコードを置く。\n\n```php\n<?php\n\nreturn array(\n\t'fuelphp' => array(\n\t\t'shutdown' => function() {\n\t\t\t$ref = new ReflectionClass('Profiler');\n\t\t\t$prop = $ref->getProperty('profiler');\n\t\t\t$prop->setAccessible(true);\n\t\t\t$profiler = $prop->getValue();\n\t\t\tif ($profiler) {\n\t\t\t\t$profiler->db = $profiler;\n\t\t\t\t$profiler->gatherConsoleData();\n\t\t\t\t$profiler->gatherPathData();\n\t\t\t\t$profiler->gatherFileData();\n\t\t\t\t$profiler->gatherMemoryData();\n\t\t\t\t$profiler->gatherQueryData();\n\t\t\t\t$profiler->gatherSpeedData();\n\t\t\t\t\\Log::info(print_r($profiler->output, true));\n\t\t\t}\n\t\t},\n\t),\n);\n```\n\n```\n(\n    [logs] => Array\n        (\n            [console] => Array\n                (\n                    [0] => Array\n                        (\n                            [data] => 1.412 ms\n                            [type] => speed\n                            [name] => Fuel\\Core\\Profiler::init Start\n                        )\n\n                    [1] => Array\n                        (\n                            [data] => 2.361 ms\n                            [type] => speed\n                            [name] => Fuel\\Core\\Fuel::init End\n                        )\n\n                    [2] => Array\n                        (\n                            [data] => 2.433 ms\n                            [type] => speed\n                            [name] => Fuel\\Core\\Uri::__construct Start\n                        )\n...\n```\n","coediting":false,"created_at":"2014-12-11T00:01:20+09:00","group":null,"id":"8daada3541c903d47946","private":false,"tags":[{"name":"PHP","versions":[]},{"name":"FuelPHP","versions":[]}],"title":"[FuelPHP] ReferectionClassを使ってProfilerを無理やりLogに出力する","updated_at":"2014-12-11T08:59:26+09:00","url":"http://qiita.com/tamanyan/items/8daada3541c903d47946","user":{"description":"キーワード: JavaScript, CoffeeScript, Ruby, Swift, C/C++, Web Developer, Mobile App Developer","facebook_id":"","followees_count":7,"followers_count":7,"github_login_name":"tamanyan","id":"tamanyan","items_count":10,"linkedin_id":"","location":"Tokyo, Japan","name":"Taketo Yoshida","organization":"","permanent_id":42035,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/42035/profile-images/1473689010","twitter_screen_name":null,"website_url":"https://github.com/tamanyan"}},{"rendered_body":"\n<h1>\n<span id=\"gitwip\" class=\"fragment\"></span><a href=\"#gitwip\"><i class=\"fa fa-link\"></i></a>gitwip</h1>\n\n<p><a href=\"http://qiita.com/a-suenami/items/129e09f8550f31e4c2da\" id=\"reference-eb7f8e7533847ee77288\">WIP PR の説明</a><br>\nWork In Progress Pull Requestを進める上でコマンドいいソフトウェアがなかったので、自作した（空コミットをどれも扱っていない）。</p>\n\n<h2>\n<span id=\"インストール方法\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>インストール方法</h2>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nnpm install -g gitwip\n</pre></div></div>\n\n<h2>\n<span id=\"使い方\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a>使い方</h2>\n\n<h3>\n<span id=\"git-wip\" class=\"fragment\"></span><a href=\"#git-wip\"><i class=\"fa fa-link\"></i></a>git wip</h3>\n\n<p><code>git wip -m \"WIP\" --fb feature-func</code> は下のコマンドと同じ</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\ngit checkout -b feature-func\ngit commit --allow-empty -m \"WIP\"\n</pre></div></div>\n\n<h4>\n<span id=\"help\" class=\"fragment\"></span><a href=\"#help\"><i class=\"fa fa-link\"></i></a>Help</h4>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n% git-wip --help\nUsage: git wip [options]\n\nOptions:\n  -m, --message           commit message                [default: \"wip\"]\n  --fb, --feature-branch  feature function branch name  [default: \"wip\"]\n</pre></div></div>\n\n<h4>\n<span id=\"example\" class=\"fragment\"></span><a href=\"#example\"><i class=\"fa fa-link\"></i></a>Example</h4>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n% git wip --fb test\n[test 8c0bbfc] wip\n</pre></div></div>\n\n<h3>\n<span id=\"git-unwip\" class=\"fragment\"></span><a href=\"#git-unwip\"><i class=\"fa fa-link\"></i></a>git unwip</h3>\n\n<p><code>git unwip --mb master --fb feature-func</code> は下のコマンドと同じ</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\ngit checkout master\ngit branch -D feature-func\n</pre></div></div>\n\n<h4>\n<span id=\"example-1\" class=\"fragment\"></span><a href=\"#example-1\"><i class=\"fa fa-link\"></i></a>Example</h4>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n% git unwip --fb test\nYour branch is up-to-date with 'origin/master'.\nDeleted branch test (was 8c0bbfc).\n</pre></div></div>\n\n<h4>\n<span id=\"help-1\" class=\"fragment\"></span><a href=\"#help-1\"><i class=\"fa fa-link\"></i></a>Help</h4>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\n% git-unwip --help\nUsage: git unwip [options]\n\nOptions:\n  --fb, --feature-branch  feature function branch to be deleted  [default: \"wip\"]\n  --mb, --merge-branch    branch to be merged                    [default: \"master\"]\n</pre></div></div>\n\n<h2>\n<span id=\"url\" class=\"fragment\"></span><a href=\"#url\"><i class=\"fa fa-link\"></i></a>URL</h2>\n\n<ul>\n<li>github : <a href=\"https://github.com/tamanyan/gitwip\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/tamanyan/gitwip</a>\n</li>\n<li>npm : <a href=\"https://www.npmjs.org/package/gitwip\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.npmjs.org/package/gitwip</a>\n</li>\n</ul>\n","body":"# gitwip\n[WIP PR の説明](http://qiita.com/a-suenami/items/129e09f8550f31e4c2da)\nWork In Progress Pull Requestを進める上でコマンドいいソフトウェアがなかったので、自作した（空コミットをどれも扱っていない）。\n\n## インストール方法\n\n```\nnpm install -g gitwip\n```\n\n## 使い方\n\n### git wip\n\n`git wip -m \"WIP\" --fb feature-func` は下のコマンドと同じ\n\n```\ngit checkout -b feature-func\ngit commit --allow-empty -m \"WIP\"\n```\n\n#### Help\n```\n% git-wip --help\nUsage: git wip [options]\n\nOptions:\n  -m, --message           commit message                [default: \"wip\"]\n  --fb, --feature-branch  feature function branch name  [default: \"wip\"]\n```\n\n#### Example\n\n```\n% git wip --fb test\n[test 8c0bbfc] wip\n```\n\n### git unwip\n\n`git unwip --mb master --fb feature-func` は下のコマンドと同じ\n\n```\ngit checkout master\ngit branch -D feature-func\n```\n\n#### Example\n\n```\n% git unwip --fb test\nYour branch is up-to-date with 'origin/master'.\nDeleted branch test (was 8c0bbfc).\n```\n\n#### Help\n```\n% git-unwip --help\nUsage: git unwip [options]\n\nOptions:\n  --fb, --feature-branch  feature function branch to be deleted  [default: \"wip\"]\n  --mb, --merge-branch    branch to be merged                    [default: \"master\"]\n```\n\n## URL\n\n- github : https://github.com/tamanyan/gitwip\n- npm : https://www.npmjs.org/package/gitwip\n","coediting":false,"created_at":"2014-10-10T17:01:54+09:00","group":null,"id":"510f1ea6f29c4edd2e5b","private":false,"tags":[{"name":"Git","versions":[]},{"name":"GitHub","versions":[]},{"name":"WIP","versions":[]}],"title":"[WIP] Work In Progress Pull Requestを簡単に進めるための npm module","updated_at":"2014-10-10T17:02:32+09:00","url":"http://qiita.com/tamanyan/items/510f1ea6f29c4edd2e5b","user":{"description":"キーワード: JavaScript, CoffeeScript, Ruby, Swift, C/C++, Web Developer, Mobile App Developer","facebook_id":"","followees_count":7,"followers_count":7,"github_login_name":"tamanyan","id":"tamanyan","items_count":10,"linkedin_id":"","location":"Tokyo, Japan","name":"Taketo Yoshida","organization":"","permanent_id":42035,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/42035/profile-images/1473689010","twitter_screen_name":null,"website_url":"https://github.com/tamanyan"}},{"rendered_body":"<p>SwiftからCocoaPodsを使う方法をメモ</p>\n\n<h1>\n<span id=\"swiftのプロジェクトを作る\" class=\"fragment\"></span><a href=\"#swift%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Swiftのプロジェクトを作る</h1>\n\n<p>新規作成→Swiftを選んでプロジェクトを作る。<br>\nGithubから適当なサンプルプログラムを持ってきてもいい</p>\n\n<h1>\n<span id=\"podfileの作成\" class=\"fragment\"></span><a href=\"#podfile%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>Podfileの作成</h1>\n\n<p>プロジェクトのトップにPodfileを作成<br>\nライブラリはAFNetworkingで</p>\n\n<ul>\n<li>プロジェクト</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\n.\n├── Podfile\n├── SwiftExample\n├── SwiftExample.xcodeproj\n├── SwiftExample.xcworkspace\n└── SwiftExampleTests\n</pre></div></div>\n\n<ul>\n<li>Podfile</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\nplatform :ios, <span class=\"s2\">\"8.0\"</span>\npod <span class=\"s1\">'AFNetworking'</span>, <span class=\"s1\">'~&gt; 2.0'</span>\n</pre></div></div>\n\n<ul>\n<li>ライブラリインストール</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\npod install\n</pre></div></div>\n\n<p>インストール後は<code>xcworkspace</code>を開く</p>\n\n<h1>\n<span id=\"bridging-headerを作る\" class=\"fragment\"></span><a href=\"#bridging-header%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Bridging-Headerを作る</h1>\n\n<p>Swiftで使いたいコードのヘッダーをインポートしておくためにBridging-Headerというインターフェイスとなるヘッダーを追加する必要がある。</p>\n\n<p>xcodeから作成すると設定を自動でしてくれるので、New Fileメニューから<code>Cocoa Class</code>を選び、言語をObjective-Cにしてクラスを生成する。<br>\n途中でbridging header作る？って聞かれるからYES。<br>\n名前はSwiftExample-Bridging-Header.hにしておく。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/9a53ff2f-a876-5fbc-caa9-8d2ab9fe3bc2.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/9a53ff2f-a876-5fbc-caa9-8d2ab9fe3bc2.png\" alt=\"screen-shot.png\"></a></p>\n\n<p>このファイルに次の一行を追加する。</p>\n\n<div class=\"code-frame\" data-lang=\"objc\"><div class=\"highlight\"><pre>\n<span class=\"cp\">#import &lt;AFNetworking/AFNetworking.h&gt;</span>\n</pre></div></div>\n\n<h1>\n<span id=\"bridging-headerの設定\" class=\"fragment\"></span><a href=\"#bridging-header%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Bridging-Headerの設定</h1>\n\n<p>最後に BuildSettings -&gt; All -&gt; 検索 \"Objective-C B\" まで打てば　Objective-C Bridging Header という設定があるので、そこに　Bridging Header までのパスを指定する。</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/0/42035/2f75cd7d-5b45-2fe7-b57b-65765ef9c622.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/42035/2f75cd7d-5b45-2fe7-b57b-65765ef9c622.png\" alt=\"スクリーンショット 2015-06-19 10.18.41.png\"></a></p>\n\n<h1>\n<span id=\"ビルド\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89\"><i class=\"fa fa-link\"></i></a>ビルド</h1>\n\n<p>するとSwift側からライブラリのコードを利用できるようになる。<br>\n特にSwift側にはimport文など書かなくてもいいようだ。<br>\nあとはビルドしてエラーがないことを確認すればよい</p>\n","body":"SwiftからCocoaPodsを使う方法をメモ\n\n# Swiftのプロジェクトを作る\n新規作成→Swiftを選んでプロジェクトを作る。\nGithubから適当なサンプルプログラムを持ってきてもいい\n\n# Podfileの作成\nプロジェクトのトップにPodfileを作成\nライブラリはAFNetworkingで\n\n- プロジェクト\n\n```bash\n.\n├── Podfile\n├── SwiftExample\n├── SwiftExample.xcodeproj\n├── SwiftExample.xcworkspace\n└── SwiftExampleTests\n```\n\n- Podfile\n\n```bash\nplatform :ios, \"8.0\"\npod 'AFNetworking', '~> 2.0'\n```\n\n- ライブラリインストール\n\n```bash\npod install\n```\n\nインストール後は```xcworkspace```を開く\n\n# Bridging-Headerを作る\nSwiftで使いたいコードのヘッダーをインポートしておくためにBridging-Headerというインターフェイスとなるヘッダーを追加する必要がある。\n\nxcodeから作成すると設定を自動でしてくれるので、New Fileメニューから```Cocoa Class```を選び、言語をObjective-Cにしてクラスを生成する。\n途中でbridging header作る？って聞かれるからYES。\n名前はSwiftExample-Bridging-Header.hにしておく。\n\n![screen-shot.png](https://qiita-image-store.s3.amazonaws.com/0/42035/9a53ff2f-a876-5fbc-caa9-8d2ab9fe3bc2.png)\n\nこのファイルに次の一行を追加する。\n\n```objc\n#import <AFNetworking/AFNetworking.h>\n```\n\n# Bridging-Headerの設定\n\n最後に BuildSettings -> All -> 検索 \"Objective-C B\" まで打てば　Objective-C Bridging Header という設定があるので、そこに　Bridging Header までのパスを指定する。\n\n![スクリーンショット 2015-06-19 10.18.41.png](https://qiita-image-store.s3.amazonaws.com/0/42035/2f75cd7d-5b45-2fe7-b57b-65765ef9c622.png)\n\n\n# ビルド\nするとSwift側からライブラリのコードを利用できるようになる。\n特にSwift側にはimport文など書かなくてもいいようだ。\nあとはビルドしてエラーがないことを確認すればよい\n","coediting":false,"created_at":"2014-06-05T20:01:18+09:00","group":null,"id":"201bdd8063452d620a66","private":false,"tags":[{"name":"Objective-C","versions":[]},{"name":"CocoaPods","versions":[]},{"name":"Swift","versions":[]}],"title":"SwiftでCocoaPodsを使う","updated_at":"2015-06-19T10:20:55+09:00","url":"http://qiita.com/tamanyan/items/201bdd8063452d620a66","user":{"description":"キーワード: JavaScript, CoffeeScript, Ruby, Swift, C/C++, Web Developer, Mobile App Developer","facebook_id":"","followees_count":7,"followers_count":7,"github_login_name":"tamanyan","id":"tamanyan","items_count":10,"linkedin_id":"","location":"Tokyo, Japan","name":"Taketo Yoshida","organization":"","permanent_id":42035,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/42035/profile-images/1473689010","twitter_screen_name":null,"website_url":"https://github.com/tamanyan"}},{"rendered_body":"\n<h1>\n<span id=\"yeomanとは\" class=\"fragment\"></span><a href=\"#yeoman%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Yeomanとは</h1>\n\n<p>LESS、Sass、compass、CoffeeScript、TypeScript等々、フロントエンドのWebアプリケーション技術は多様化しており、標準化された開発手法はなく今までは各々がツールを用いていた。<br>\nYoemanはフロントエンド開発に有効なツールを組み合わせてモダンな開発フローを提供するツールセットである。<br>\nようは今まで手動でやっていたGruntの設定などを自動で生成してくれる。</p>\n\n<h2>\n<span id=\"yeomanを構成するツール\" class=\"fragment\"></span><a href=\"#yeoman%E3%82%92%E6%A7%8B%E6%88%90%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Yeomanを構成するツール</h2>\n\n<ul>\n<li>yo\n\n<ul>\n<li>アプリケーションの雛形を作成してくれる</li>\n<li>BowerやGruntの設定</li>\n</ul>\n</li>\n<li>Grunt\n\n<ul>\n<li>ビルド &amp; テスト</li>\n</ul>\n</li>\n<li>Bower\n\n<ul>\n<li>必要なフロントエンドのライブラリの管理</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"インストール\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>インストール</h1>\n\n<h3>\n<span id=\"nodeのインストール\" class=\"fragment\"></span><a href=\"#node%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Nodeのインストール</h3>\n\n<p><a href=\"http://qiita.com/dribble13/items/e895208727c85ef9bc52\" id=\"reference-0e1189826e08d7b6db67\">ここを見て</a>Nodeのインストールを行う。<br>\n一応Nodeのバージョンはv0.11.13で動作確認。<br>\n環境は<code>OS X 10.9.2</code></p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\nnvm install v0.11.13\n</pre></div></div>\n\n<h3>\n<span id=\"compassのインストール\" class=\"fragment\"></span><a href=\"#compass%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Compassのインストール</h3>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\nsudo gem install compass\n</pre></div></div>\n\n<h3>\n<span id=\"yo-grunt-bowerのインストール\" class=\"fragment\"></span><a href=\"#yo-grunt-bower%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>yo Grunt Bowerのインストール</h3>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\nnpm install -g  bower grunt-cli yo\n</pre></div></div>\n\n<h3>\n<span id=\"generator-angularのインストール\" class=\"fragment\"></span><a href=\"#generator-angular%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>generator-angularのインストール</h3>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\nnpm install -g generator-angular\nmkdir sample-app <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> <span class=\"nv\">$_</span>\nyo angular <span class=\"o\">[</span>app-name<span class=\"o\">]</span>\n<span class=\"c\"># yo angular [app-name] --coffee Coffeeで開発したい場合こっち</span>\n</pre></div></div>\n\n<p>後は下の画像のようにすべて回答はYesで</p>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/671/42035/77daebb0-40cd-5082-9e5b-65dbecb4e0cd.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/671/42035/77daebb0-40cd-5082-9e5b-65dbecb4e0cd.png\" alt=\"yeoman.png\"></a></p>\n\n<h1>\n<span id=\"ビルド--テスト\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89--%E3%83%86%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>ビルド &amp; テスト</h1>\n\n<h3>\n<span id=\"ビルド\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89\"><i class=\"fa fa-link\"></i></a>ビルド</h3>\n\n<p>以下のコマンドを入力すると自動でブラウザが立ち上がり、下のページが表示される</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\ngrunt serve\n</pre></div></div>\n\n<p><a href=\"https://qiita-image-store.s3.amazonaws.com/671/42035/7d1d4e28-e1fd-8421-49d4-b761b3fced6b.png\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-image-store.s3.amazonaws.com/671/42035/7d1d4e28-e1fd-8421-49d4-b761b3fced6b.png\" alt=\"yeoman-sample.png\"></a></p>\n\n<p>すでに以下の環境が整っているためすぐに開発することができる。</p>\n\n<ul>\n<li>LiveReload</li>\n<li>Sass(、Coffee)自動ビルド</li>\n<li>自動テスト</li>\n</ul>\n\n<h3>\n<span id=\"エラー修正\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%A9%E3%83%BC%E4%BF%AE%E6%AD%A3\"><i class=\"fa fa-link\"></i></a>エラー修正</h3>\n\n<p>しかし自分の環境では以下のエラーが発生</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\nLoading <span class=\"s2\">\"cdnify.js\"</span> tasks...ERROR\n&gt;&gt; Error: Unable to create git_template directory: Arguments to path.resolve must be strings\n\nRunning <span class=\"s2\">\"serve\"</span> task\n\nRunning <span class=\"s2\">\"clean:server\"</span> <span class=\"o\">(</span>clean<span class=\"o\">)</span> task\nCleaning .tmp...OK\n\nRunning <span class=\"s2\">\"bowerInstall:app\"</span> <span class=\"o\">(</span>bowerInstall<span class=\"o\">)</span> task\n\nRunning <span class=\"s2\">\"bowerInstall:sass\"</span> <span class=\"o\">(</span>bowerInstall<span class=\"o\">)</span> task\n\nRunning <span class=\"s2\">\"concurrent:server\"</span> <span class=\"o\">(</span>concurrent<span class=\"o\">)</span> task\n\n    Loading <span class=\"s2\">\"cdnify.js\"</span> tasks...ERROR\n    &gt;&gt; Error: Unable to create git_template directory: Arguments to path.resolve must be strings\n\n    Running <span class=\"s2\">\"compass:server\"</span> <span class=\"o\">(</span>compass<span class=\"o\">)</span> task\n    directory .tmp/styles/ \n       create .tmp/styles/main.css <span class=\"o\">(</span>2.012s<span class=\"o\">)</span>\n    Compilation took 2.027s\n\n    Done, without errors.\n\n...以下略\n</pre></div></div>\n\n<p>どうやらgrunt-google-cdnというのがエラーを吐いているみたい。<br>\nあと<code>grunt test</code>を実行した時もエラーを吐いていた。<br>\nエラーを解消するには以下のようにpackage.jsonを編集</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\ndiff --git a/package.json b/package.json\nindex 6c2d0b5..cd95d39 100644\n--- a/package.json\n+++ b/package.json\n@@ -18,7 +18,7 @@\n     <span class=\"s2\">\"grunt-contrib-jshint\"</span>: <span class=\"s2\">\"~0.7.1\"</span>,\n     <span class=\"s2\">\"grunt-contrib-uglify\"</span>: <span class=\"s2\">\"~0.2.0\"</span>,\n     <span class=\"s2\">\"grunt-contrib-watch\"</span>: <span class=\"s2\">\"~0.5.2\"</span>,\n-    <span class=\"s2\">\"grunt-google-cdn\"</span>: <span class=\"s2\">\"~0.2.0\"</span>,\n+    <span class=\"s2\">\"grunt-google-cdn\"</span>: <span class=\"s2\">\"~0.4.0\"</span>,\n     <span class=\"s2\">\"grunt-karma\"</span>: <span class=\"s2\">\"^0.8.3\"</span>,\n     <span class=\"s2\">\"grunt-newer\"</span>: <span class=\"s2\">\"~0.6.1\"</span>,\n     <span class=\"s2\">\"grunt-ngmin\"</span>: <span class=\"s2\">\"~0.0.2\"</span>,\n@@ -27,6 +27,7 @@\n     <span class=\"s2\">\"grunt-usemin\"</span>: <span class=\"s2\">\"~2.0.0\"</span>,\n     <span class=\"s2\">\"jshint-stylish\"</span>: <span class=\"s2\">\"~0.1.3\"</span>,\n     <span class=\"s2\">\"karma\"</span>: <span class=\"s2\">\"^0.12.16\"</span>,\n+    <span class=\"s2\">\"karma-jasmine\"</span>: <span class=\"s2\">\"~0.2.0\"</span>,\n     <span class=\"s2\">\"karma-ng-html2js-preprocessor\"</span>: <span class=\"s2\">\"^0.1.0\"</span>,\n     <span class=\"s2\">\"karma-ng-scenario\"</span>: <span class=\"s2\">\"^0.1.0\"</span>,\n     <span class=\"s2\">\"load-grunt-tasks\"</span>: <span class=\"s2\">\"~0.4.0\"</span>,\n</pre></div></div>\n\n<p>そのあとは変更したnpmモジュールを以下のコマンドでインストール</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\nnpm install\n</pre></div></div>\n\n<h3>\n<span id=\"リリースモードでビルド\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89\"><i class=\"fa fa-link\"></i></a>リリースモードでビルド</h3>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\ngrunt serve:dist\n</pre></div></div>\n\n<h3>\n<span id=\"テストのみ\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E3%81%BF\"><i class=\"fa fa-link\"></i></a>テストのみ</h3>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>\ngrunt <span class=\"nb\">test</span>\n</pre></div></div>\n","body":"# Yeomanとは\nLESS、Sass、compass、CoffeeScript、TypeScript等々、フロントエンドのWebアプリケーション技術は多様化しており、標準化された開発手法はなく今までは各々がツールを用いていた。\nYoemanはフロントエンド開発に有効なツールを組み合わせてモダンな開発フローを提供するツールセットである。\nようは今まで手動でやっていたGruntの設定などを自動で生成してくれる。\n\n## Yeomanを構成するツール\n- yo\n  - アプリケーションの雛形を作成してくれる\n  - BowerやGruntの設定\n- Grunt\n  - ビルド & テスト\n- Bower\n  - 必要なフロントエンドのライブラリの管理\n\n# インストール \n### Nodeのインストール\n[ここを見て](http://qiita.com/dribble13/items/e895208727c85ef9bc52)Nodeのインストールを行う。\n一応Nodeのバージョンはv0.11.13で動作確認。\n環境は```OS X 10.9.2```\n\n```bash\nnvm install v0.11.13\n```\n\n### Compassのインストール\n\n```bash\nsudo gem install compass\n```\n\n### yo Grunt Bowerのインストール\n\n```bash\nnpm install -g  bower grunt-cli yo\n```\n\n### generator-angularのインストール\n\n```bash\nnpm install -g generator-angular\nmkdir sample-app && cd $_\nyo angular [app-name]\n# yo angular [app-name] --coffee Coffeeで開発したい場合こっち\n```\n後は下の画像のようにすべて回答はYesで\n\n![yeoman.png](https://qiita-image-store.s3.amazonaws.com/671/42035/77daebb0-40cd-5082-9e5b-65dbecb4e0cd.png)\n\n# ビルド & テスト\n### ビルド\n以下のコマンドを入力すると自動でブラウザが立ち上がり、下のページが表示される\n\n```bash\ngrunt serve\n```\n\n![yeoman-sample.png](https://qiita-image-store.s3.amazonaws.com/671/42035/7d1d4e28-e1fd-8421-49d4-b761b3fced6b.png)\n\nすでに以下の環境が整っているためすぐに開発することができる。\n\n- LiveReload\n- Sass(、Coffee)自動ビルド\n- 自動テスト\n\n### エラー修正\nしかし自分の環境では以下のエラーが発生\n\n```bash\nLoading \"cdnify.js\" tasks...ERROR\n>> Error: Unable to create git_template directory: Arguments to path.resolve must be strings\n\nRunning \"serve\" task\n\nRunning \"clean:server\" (clean) task\nCleaning .tmp...OK\n\nRunning \"bowerInstall:app\" (bowerInstall) task\n\nRunning \"bowerInstall:sass\" (bowerInstall) task\n\nRunning \"concurrent:server\" (concurrent) task\n    \n    Loading \"cdnify.js\" tasks...ERROR\n    >> Error: Unable to create git_template directory: Arguments to path.resolve must be strings\n    \n    Running \"compass:server\" (compass) task\n    directory .tmp/styles/ \n       create .tmp/styles/main.css (2.012s)\n    Compilation took 2.027s\n    \n    Done, without errors.\n    \n...以下略\n```\n\nどうやらgrunt-google-cdnというのがエラーを吐いているみたい。\nあと```grunt test```を実行した時もエラーを吐いていた。\nエラーを解消するには以下のようにpackage.jsonを編集\n\n```bash\ndiff --git a/package.json b/package.json\nindex 6c2d0b5..cd95d39 100644\n--- a/package.json\n+++ b/package.json\n@@ -18,7 +18,7 @@\n     \"grunt-contrib-jshint\": \"~0.7.1\",\n     \"grunt-contrib-uglify\": \"~0.2.0\",\n     \"grunt-contrib-watch\": \"~0.5.2\",\n-    \"grunt-google-cdn\": \"~0.2.0\",\n+    \"grunt-google-cdn\": \"~0.4.0\",\n     \"grunt-karma\": \"^0.8.3\",\n     \"grunt-newer\": \"~0.6.1\",\n     \"grunt-ngmin\": \"~0.0.2\",\n@@ -27,6 +27,7 @@\n     \"grunt-usemin\": \"~2.0.0\",\n     \"jshint-stylish\": \"~0.1.3\",\n     \"karma\": \"^0.12.16\",\n+    \"karma-jasmine\": \"~0.2.0\",\n     \"karma-ng-html2js-preprocessor\": \"^0.1.0\",\n     \"karma-ng-scenario\": \"^0.1.0\",\n     \"load-grunt-tasks\": \"~0.4.0\",\n```\n\nそのあとは変更したnpmモジュールを以下のコマンドでインストール\n\n```bash\nnpm install\n```\n\n### リリースモードでビルド\n\n```bash\ngrunt serve:dist\n```\n\n### テストのみ\n\n```bash\ngrunt test\n```\n","coediting":false,"created_at":"2014-05-28T14:22:24+09:00","group":null,"id":"b40906431638a6d21727","private":false,"tags":[{"name":"JavaScript","versions":[]},{"name":"grunt","versions":[]},{"name":"AngularJS","versions":[]},{"name":"bower","versions":[]},{"name":"yeoman","versions":[]}],"title":"Yeoman+AngularJSでモダンなフロントエンド開発","updated_at":"2014-05-28T14:33:48+09:00","url":"http://qiita.com/tamanyan/items/b40906431638a6d21727","user":{"description":"キーワード: JavaScript, CoffeeScript, Ruby, Swift, C/C++, Web Developer, Mobile App Developer","facebook_id":"","followees_count":7,"followers_count":7,"github_login_name":"tamanyan","id":"tamanyan","items_count":10,"linkedin_id":"","location":"Tokyo, Japan","name":"Taketo Yoshida","organization":"","permanent_id":42035,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/42035/profile-images/1473689010","twitter_screen_name":null,"website_url":"https://github.com/tamanyan"}}]
